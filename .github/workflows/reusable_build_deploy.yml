name: Reusable NixOS build and deploy workflow

# For documentation about the failure() condition, see
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idneeds

on:
  workflow_call:
    inputs:
      push_secrets:
        required: true
        type: boolean
      push_robot_keys:
        required: true
        type: boolean
    secrets:
      NIXOS_OCB_CONFIG_DEPLOY_KEY:
        required: true
      NIXOS_OCB_KEY_MGMT_API_TOKEN:
        required: true
      NIXOS_ROBOT_KEY:
        required: true
      NIXOS_SECRET_MANAGEMENT_VAULT_KEY:
        required: true


jobs:

  update_nixos_robot_keys:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout the NixOS repo
        uses: 'actions/checkout@v2'
        with:
          repository: 'msf-ocb/nixos'
          persist-credentials: false

      - name: Checkout the NixOS-OCB-Config repo
        uses: 'actions/checkout@v2'
        with:
          repository: 'msf-ocb/nixos-ocb-config'
          path: 'org-config'
          ssh-key: ${{ secrets.NIXOS_OCB_CONFIG_DEPLOY_KEY }}
          persist-credentials: false

      - name: Install the Nix package manager
        uses: cachix/install-nix-action@master
        with:
          nix_path: nixpkgs=https://nix-channel-redirect.ocb.msf.org/nixexprs.tar.xz

      - name: Update the NixOS Robot SSH keys
        id: do_update_keys
        if: >-
          ${{ inputs.push_robot_keys &&
              github.event_name == 'push' &&
              github.ref == 'refs/heads/master' }}
        run: >-
          nix-shell ./scripts/python_nixostools/shell.nix --run
          "update_nixos_keys
          --api_token ${{ secrets.NIXOS_OCB_KEY_MGMT_API_TOKEN }}
          --nixos_config_dir   './org-config'
          --tunnel_config_path './org-config/json/tunnels.d/'"

      - name: Update the NixOS Robot SSH keys (dry run)
        if: >-
          ${{ steps.do_update_keys.outcome == 'skipped' }}
        run: >-
          nix-shell ./scripts/python_nixostools/shell.nix --run
          "update_nixos_keys
          --api_token ${{ secrets.NIXOS_OCB_KEY_MGMT_API_TOKEN }}
          --nixos_config_dir   './org-config'
          --tunnel_config_path './org-config/json/tunnels.d/'
          --dry_run"


  encrypt_secrets:
    runs-on: 'ubuntu-latest'
    outputs:
      secrets_pushed_outcome: ${{ steps.commit_push_step.outcome }}
    steps:
      - name: Checkout the NixOS repo
        uses: 'actions/checkout@v2'
        with:
          repository: 'msf-ocb/nixos'
          persist-credentials: false

      - name: Checkout the NixOS-OCB-Config repo
        uses: 'actions/checkout@v2'
        with:
          repository: 'msf-ocb/nixos-ocb-config'
          path: 'org-config'
          # Do not use the default GITHUB_TOKEN for authentication,
          # See: https://docs.github.com/en/actions/reference/authentication-in-a-workflow#using-the-github_token-in-a-workflow
          # This makes sure that the action gets retriggered after committing
          # the generated secrets, which is required for the PR validation.
          ssh-key: ${{ secrets.NIXOS_OCB_CONFIG_DEPLOY_KEY }}

      - name: Install the Nix package manager
        uses: cachix/install-nix-action@master
        with:
          nix_path: nixpkgs=https://nix-channel-redirect.ocb.msf.org/nixexprs.tar.xz

      - name: Clear the old generated secrets files
        run: rm "org-config/secrets/generated/generated-secrets.yml"

      - name: Generate the new generated secrets files
        run: >-
          nix-shell ./scripts/python_nixostools/shell.nix --run
          "encrypt_server_secrets
          --ansible_vault_passwd '${{ secrets.NIXOS_SECRET_MANAGEMENT_VAULT_KEY }}'
          --output_path          './org-config/secrets/generated/generated-secrets.yml'
          --secrets_directory    './org-config/secrets/'
          --tunnel_config_path   './org-config/json/tunnels.d/'"

      - name: Commit and push the new generated secrets files
        # Only rerun this step if the master secrets have changed, but the auto-commit
        # is not the last commit of this PR, as checked by the check_secrets_ok job.
        # This avoids an infinite loop where the secrets keep on being regenerated.
        if: >-
          ${{ github.event_name == 'pull_request' &&
              inputs.push_secrets }}
        id: commit_push_step
        uses: EndBug/add-and-commit@v7
        with:
          cwd: 'org-config'
          add: 'secrets/generated/*'
          message: |
            Commit newly generated secrets (GitHub Action: ${{ github.workflow }}).
          default_author: github_actions
          push: true


  build:
    name: 'build'
    runs-on: 'ubuntu-latest'
    needs: encrypt_secrets
    # Only run this step if no new secrets were pushed,
    # otherwise the action will be retriggered anyway.
    if: >-
      ${{ ! failure() &&
          needs.encrypt_secrets.outputs.secrets_pushed_outcome == 'skipped' }}
    strategy:
      matrix:
        # When changing these settings, you need to change as well
        # the required checks in the branch protection policy on GitHub !!
        group_count: [ 5 ]
        group_id: [ 0, 1, 2, 3, 4 ]
    steps:
      - name: Checkout the NixOS repo
        uses: 'actions/checkout@v2'
        with:
          repository: 'msf-ocb/nixos'
          persist-credentials: false

      - name: Checkout the NixOS-OCB-Config repo
        uses: 'actions/checkout@v2'
        with:
          repository: 'msf-ocb/nixos-ocb-config'
          path: 'org-config'
          ssh-key: ${{ secrets.NIXOS_OCB_CONFIG_DEPLOY_KEY }}
          persist-credentials: false

      - name: Install the Nix package manager
        uses: 'cachix/install-nix-action@master'
        with:
          nix_path: 'nixpkgs=https://nix-channel-redirect.ocb.msf.org/nixexprs.tar.xz'

      - name: Configure the Panic Button Cachix cache
        uses: 'cachix/cachix-action@master'
        with:
          name: 'panic-button'
        continue-on-error: true

      - name: Build the NixOS configurations
        run: >-
          nix-shell ./scripts/python_nixostools/shell.nix --run
          "build_nixos_configs
          --group_amount ${{ matrix.group_count }}
          --group_id ${{ matrix.group_id }}"


  build_iso:
    runs-on: 'ubuntu-latest'
    needs: encrypt_secrets
    # Only run this step if new secrets were pushed,
    # otherwise the action will be retriggered anyway.
    if: >-
      ${{ ! failure() &&
          needs.encrypt_secrets.outputs.secrets_pushed_outcome == 'skipped' }}
    steps:
      - name: Checkout the NixOS repo
        uses: 'actions/checkout@v2'
        with:
          repository: 'msf-ocb/nixos'
          persist-credentials: false

      - name: Checkout the NixOS-OCB-Config repo
        uses: 'actions/checkout@v2'
        with:
          repository: 'msf-ocb/nixos-ocb-config'
          path: 'org-config'
          ssh-key: ${{ secrets.NIXOS_OCB_CONFIG_DEPLOY_KEY }}
          persist-credentials: false

      - name: Install the Nix package manager
        uses: 'cachix/install-nix-action@master'
        with:
          nix_path: 'nixpkgs=https://nix-channel-redirect.ocb.msf.org/nixexprs.tar.xz'

      - name: Build the ISO image
        run: >-
          touch ./local/id_tunnel_iso &&
          nix-instantiate
          '<nixpkgs/nixos>'
          -A config.system.build.isoImage
          -I nixos-config='rescue_iso/iso.nix'


  deploy:
    runs-on: 'ubuntu-latest'
    needs:
      - build
      - build_iso
      - update_nixos_robot_keys
    # We only want to deploy when commits have been pushed to master
    if: >-
      ${{ ! failure() &&
          github.event_name == 'push' &&
          github.ref == 'refs/heads/master' }}
    steps:
      - name: Auto-deploy the NixOS config to the requested servers
        uses: 'msf-ocb/nixos-deploy@master'
        with:
          nixos_robot_key: '${{ secrets.NIXOS_ROBOT_KEY }}'
          nixos_deploy_fixed_hosts: >-
            sshrelay1.ocb.msf.org
            sshrelay2.ocb.msf.org
            sshrelay-za-1.ocb.msf.org
          nixos_deploy_service: 'nixos_rebuild_config.service'



